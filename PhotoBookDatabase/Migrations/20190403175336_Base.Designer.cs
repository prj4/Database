// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoBookDatabase.Data;

namespace PhotoBookDatabase.Migrations
{
    [DbContext(typeof(PhotoBookDbContext))]
    [Migration("20190403175336_Base")]
    partial class Base
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PhotoBookDatabase.Model.Event", b =>
                {
                    b.Property<int>("Pin")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("HostId");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Pin");

                    b.HasIndex("HostId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Pin = 1,
                            Description = "Beskrivelse1",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HostId = 1,
                            Location = "Lokation1",
                            Name = "Event1",
                            StartDate = new DateTime(2019, 4, 3, 19, 53, 35, 685, DateTimeKind.Local).AddTicks(9322)
                        },
                        new
                        {
                            Pin = 2,
                            Description = "Beskrivelse2",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HostId = 2,
                            Location = "Lokation2",
                            Name = "Event2",
                            StartDate = new DateTime(2019, 4, 3, 19, 53, 35, 692, DateTimeKind.Local).AddTicks(4993)
                        },
                        new
                        {
                            Pin = 3,
                            Description = "Beskrivelse3",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HostId = 3,
                            Location = "Lokation3",
                            Name = "Event3",
                            StartDate = new DateTime(2019, 4, 3, 19, 53, 35, 692, DateTimeKind.Local).AddTicks(5014)
                        });
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.EventGuest", b =>
                {
                    b.Property<int>("EventPin");

                    b.Property<int>("GuestId");

                    b.HasKey("EventPin", "GuestId");

                    b.HasIndex("GuestId");

                    b.ToTable("EventGuests");

                    b.HasData(
                        new
                        {
                            EventPin = 1,
                            GuestId = 4
                        },
                        new
                        {
                            EventPin = 2,
                            GuestId = 5
                        },
                        new
                        {
                            EventPin = 3,
                            GuestId = 6
                        });
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EventPin");

                    b.Property<int>("TakerId");

                    b.Property<string>("URL")
                        .IsRequired();

                    b.HasKey("PictureId");

                    b.HasIndex("EventPin");

                    b.HasIndex("TakerId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            PictureId = 1,
                            EventPin = 1,
                            TakerId = 1,
                            URL = "wwwroot/Images/1.png"
                        },
                        new
                        {
                            PictureId = 2,
                            EventPin = 2,
                            TakerId = 2,
                            URL = "wwwroot/Images/2.png"
                        },
                        new
                        {
                            PictureId = 3,
                            EventPin = 3,
                            TakerId = 3,
                            URL = "wwwroot/Images/3.png"
                        });
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.PictureTaker", b =>
                {
                    b.Property<int>("PictureTakerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PictureTakerId");

                    b.ToTable("PictureTakers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PictureTaker");
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Guest", b =>
                {
                    b.HasBaseType("PhotoBookDatabase.Model.PictureTaker");

                    b.HasDiscriminator().HasValue("Guest");

                    b.HasData(
                        new
                        {
                            PictureTakerId = 4,
                            Name = "Guest1"
                        },
                        new
                        {
                            PictureTakerId = 5,
                            Name = "Guest2"
                        },
                        new
                        {
                            PictureTakerId = 6,
                            Name = "Guest3"
                        });
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Host", b =>
                {
                    b.HasBaseType("PhotoBookDatabase.Model.PictureTaker");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasDiscriminator().HasValue("Host");

                    b.HasData(
                        new
                        {
                            PictureTakerId = 1,
                            Name = "Host1",
                            Email = "Email1@email.com"
                        },
                        new
                        {
                            PictureTakerId = 2,
                            Name = "Host2",
                            Email = "Email2@email.com"
                        },
                        new
                        {
                            PictureTakerId = 3,
                            Name = "Host3",
                            Email = "Email3@email.com"
                        });
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Event", b =>
                {
                    b.HasOne("PhotoBookDatabase.Model.Host", "Host")
                        .WithMany("Events")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.EventGuest", b =>
                {
                    b.HasOne("PhotoBookDatabase.Model.Event", "Event")
                        .WithMany("EventGuests")
                        .HasForeignKey("EventPin")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhotoBookDatabase.Model.Guest", "Guest")
                        .WithMany("EventGuests")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Picture", b =>
                {
                    b.HasOne("PhotoBookDatabase.Model.Event", "Event")
                        .WithMany("Pictures")
                        .HasForeignKey("EventPin")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhotoBookDatabase.Model.PictureTaker", "PictureTaker")
                        .WithMany("Pictures")
                        .HasForeignKey("TakerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
