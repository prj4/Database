// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PhotoBookDatabase.Data;

namespace PhotoBookDatabase.Migrations
{
    [DbContext(typeof(PhotoBookDbContext))]
    [Migration("20190519133519_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PhotoBookDatabase.Model.Event", b =>
                {
                    b.Property<string>("Pin")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("HostId");

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Pin");

                    b.HasIndex("HostId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Pin = "1",
                            Description = "Beskrivelse1",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HostId = 1,
                            Location = "Lokation1",
                            Name = "Event1",
                            StartDate = new DateTime(2019, 5, 19, 15, 35, 18, 286, DateTimeKind.Local).AddTicks(1901)
                        },
                        new
                        {
                            Pin = "2",
                            Description = "Beskrivelse2",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HostId = 2,
                            Location = "Lokation2",
                            Name = "Event2",
                            StartDate = new DateTime(2019, 5, 19, 15, 35, 18, 288, DateTimeKind.Local).AddTicks(9978)
                        },
                        new
                        {
                            Pin = "3",
                            Description = "Beskrivelse3",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HostId = 3,
                            Location = "Lokation3",
                            Name = "Event3",
                            StartDate = new DateTime(2019, 5, 19, 15, 35, 18, 288, DateTimeKind.Local).AddTicks(9999)
                        },
                        new
                        {
                            Pin = "1234",
                            Description = "Beskrivelse4",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HostId = 1,
                            Location = "Lokation4",
                            Name = "Event4",
                            StartDate = new DateTime(2019, 5, 19, 15, 35, 18, 289, DateTimeKind.Local).AddTicks(2)
                        },
                        new
                        {
                            Pin = "2345",
                            Description = "Beskrivelse5",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HostId = 2,
                            Location = "Lokation5",
                            Name = "Event5",
                            StartDate = new DateTime(2019, 5, 19, 15, 35, 18, 289, DateTimeKind.Local).AddTicks(4)
                        },
                        new
                        {
                            Pin = "3456",
                            Description = "Beskrivelse6",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            HostId = 3,
                            Location = "Lokation6",
                            Name = "Event6",
                            StartDate = new DateTime(2019, 5, 19, 15, 35, 18, 289, DateTimeKind.Local).AddTicks(10)
                        });
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Guest", b =>
                {
                    b.Property<int>("GuestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventPin")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("GuestId");

                    b.HasIndex("EventPin");

                    b.ToTable("Guests");

                    b.HasData(
                        new
                        {
                            GuestId = 1,
                            EventPin = "1",
                            Name = "Guest1"
                        },
                        new
                        {
                            GuestId = 2,
                            EventPin = "2",
                            Name = "Guest2"
                        },
                        new
                        {
                            GuestId = 3,
                            EventPin = "3",
                            Name = "Guest3"
                        });
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Host", b =>
                {
                    b.Property<int>("HostId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("HostId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Hosts");

                    b.HasData(
                        new
                        {
                            HostId = 1,
                            Email = "Email1@email.com",
                            Name = "Host1"
                        },
                        new
                        {
                            HostId = 2,
                            Email = "Email2@email.com",
                            Name = "Host2"
                        },
                        new
                        {
                            HostId = 3,
                            Email = "Email3@email.com",
                            Name = "Host3"
                        },
                        new
                        {
                            HostId = 4,
                            Email = "Email5@email.com",
                            Name = "Host5"
                        });
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventPin")
                        .IsRequired();

                    b.Property<int?>("GuestId");

                    b.Property<int?>("HostId");

                    b.HasKey("PictureId");

                    b.HasIndex("EventPin");

                    b.HasIndex("GuestId");

                    b.HasIndex("HostId");

                    b.ToTable("Pictures");

                    b.HasData(
                        new
                        {
                            PictureId = 1,
                            EventPin = "1",
                            HostId = 1
                        },
                        new
                        {
                            PictureId = 2,
                            EventPin = "2",
                            HostId = 2
                        },
                        new
                        {
                            PictureId = 3,
                            EventPin = "3",
                            HostId = 3
                        });
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Event", b =>
                {
                    b.HasOne("PhotoBookDatabase.Model.Host", "Host")
                        .WithMany("Events")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Guest", b =>
                {
                    b.HasOne("PhotoBookDatabase.Model.Event", "Event")
                        .WithMany("Guests")
                        .HasForeignKey("EventPin")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PhotoBookDatabase.Model.Picture", b =>
                {
                    b.HasOne("PhotoBookDatabase.Model.Event", "Event")
                        .WithMany("Pictures")
                        .HasForeignKey("EventPin")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhotoBookDatabase.Model.Guest", "Guest")
                        .WithMany("Pictures")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PhotoBookDatabase.Model.Host", "Host")
                        .WithMany("Pictures")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
